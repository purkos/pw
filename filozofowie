#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5

pthread_mutex_t forks[NUM_PHILOSOPHERS]; 
pthread_t philosophers[NUM_PHILOSOPHERS]; 

void* philosopher(void* arg) {
    int id = *(int*)arg; 
    int leftFork = id;
    int rightFork = (id + 1) % NUM_PHILOSOPHERS;

    while (1) {
    
        printf("Filozof %d: myśli.\n", id);
        sleep(rand() % 3 + 1); 

        if (id % 2 == 0) {
            pthread_mutex_lock(&forks[leftFork]);
            printf("Filozof %d: podniósł lewy widelec (%d).\n", id, leftFork);
            pthread_mutex_lock(&forks[rightFork]);
            printf("Filozof %d: podniósł prawy widelec (%d).\n", id, rightFork);
        } else {
            pthread_mutex_lock(&forks[rightFork]);
            printf("Filozof %d: podniósł prawy widelec (%d).\n", id, rightFork);
            pthread_mutex_lock(&forks[leftFork]);
            printf("Filozof %d: podniósł lewy widelec (%d).\n", id, leftFork);
        }

        printf("Filozof %d: je.\n", id);
        sleep(rand() % 3 + 1);

        pthread_mutex_unlock(&forks[leftFork]);
        printf("Filozof %d: odłożył lewy widelec (%d).\n", id, leftFork);
        pthread_mutex_unlock(&forks[rightFork]);
        printf("Filozof %d: odłożył prawy widelec (%d).\n", id, rightFork);
    }
    return NULL;
}

int main() {
    int ids[NUM_PHILOSOPHERS];

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&forks[i], NULL);
    }

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_destroy(&forks[i]);
    }

    return 0;
}
